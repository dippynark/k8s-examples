apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: queue-checker
  namespace: sonarr
spec:
  schedule: "*/10 * * * *"
  successfulJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: "false"
        spec:
          restartPolicy: Never
          containers:
          - name: queue-checker
            image: dippynark/python
            env:
            - name: SONARR_API_KEY
              valueFrom:
                secretKeyRef:
                  name: sonarr
                  key: sonarr_apikey
            args:
            - bash
            - -c
            - |
                set -euo pipefail

                cat > queue-checker.py <<EOF
                import requests
                import json
                import os
                import sys
                import re

                url = "http://sonarr.sonarr.svc.cluster.local/api/v3/queue"
                unknown_warning = False
                record_ids_to_delete = []
                for page in range(1, 10):

                    r = requests.get(url+"?pageSize=100&page=%s" % str(page), headers={"X-Api-Key": os.environ['SONARR_API_KEY']})
                    r.raise_for_status()
                    json_data = json.loads(r.text)

                    if page != json_data["page"]:
                        # we have cycled through all the items
                        break
                    
                    for record in json_data["records"]:
                        # This key does no exist when the download client is unavailable
                        if "trackedDownloadStatus" in record and record["trackedDownloadStatus"] != "ok":
                            known_reason = False
                            unknown_reason = False
                            for statusMessage in record["statusMessages"]:
                                for message in statusMessage["messages"]:
                                    # A queue entry could have multiple errors so we check harmless
                                    # ones first and only delete if it's blocking something else
                                    if message == 'Episode has a TBA title and recently aired':
                                        known_reason = True
                                        continue
                                    if message == 'Has the same filesize as existing file':
                                        known_reason = True
                                        continue
                                    if message == "Not an upgrade for existing episode file(s)":
                                        known_reason = True
                                        continue
                                    if message == "Failed to import episode":
                                        known_reason = True
                                        continue
                                    if message.startswith("Episode file already imported at "):
                                        known_reason = True
                                        continue
                                    if message == "Sample":
                                        if record['id'] not in record_ids_to_delete:
                                            record_ids_to_delete.append(record['id'])
                                        known_reason = True
                                        continue
                                    if message == "Invalid season or episode":
                                        if record['id'] not in record_ids_to_delete:
                                            record_ids_to_delete.append(record['id'])
                                        known_reason = True
                                        continue
                                    if message == "Single episode file contains all episodes in seasons":
                                        if record['id'] not in record_ids_to_delete:
                                            record_ids_to_delete.append(record['id'])
                                        known_reason = True
                                        continue
                                    if message == "Unable to parse file":
                                        if record['id'] not in record_ids_to_delete:
                                            record_ids_to_delete.append(record['id'])
                                        known_reason = True
                                        continue
                                    if re.search('Quality of file .+ does not match quality of grabbed release .+', message):
                                        if record['id'] not in record_ids_to_delete:
                                            record_ids_to_delete.append(record['id'])
                                        known_reason = True
                                        continue
                                    if re.search('.+ was unexpected considering the folder name .+', message):
                                        if record['id'] not in record_ids_to_delete:
                                            record_ids_to_delete.append(record['id'])
                                        known_reason = True
                                        continue
                                    unknown_reason = True
                                    print("%s: %s" % (statusMessage["title"], message))
                            if unknown_reason or not known_reason:
                                unknown_warning = True
                else:
                    print("ERROR: did not page through all items")
                    sys.exit(1)

                for record_id in record_ids_to_delete:
                    print("Deleting %s" % str(record_id))
                    r = requests.delete(url+"/%s?blacklist=true&removeFromClient=false" % str(record_id), headers={"X-Api-Key": os.environ['SONARR_API_KEY']})
                    r.raise_for_status()

                if unknown_warning:
                    print("ERROR: there are unknown warnings")
                    sys.exit(1)

                print("Queue Ok - Nothing to do")
                EOF
                python queue-checker.py
