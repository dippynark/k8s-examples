apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: queue-checker
  namespace: lidarr
spec:
  schedule: "*/10 * * * *"
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        spec:
          restartPolicy: Never
          containers:
          - name: queue-checker
            image: dippynark/python
            env:
            - name: X_API_KEY
              valueFrom:
                secretKeyRef:
                  name: x-api-key
                  key: value
            command:
              - bash
              - -c
              - |
                set -euo pipefail
  
                cat > queue-checker.py <<'EOF'
                import os
                import sys
                import json
                import requests

                unknown_warning = False
                for page in range(1, 10):

                    url = "http://lidarr.lidarr.svc.cluster.local/api/v1/queue?pageSize=100&page=%s" % str(page)
                    r = requests.get(url, headers={"X-Api-Key": os.environ['X_API_KEY']})
                    r.raise_for_status()
                    json_data = r.json()

                    if page != json_data["page"]:
                        # we have cycled through all the items
                        break

                    record_ids_to_delete = []
                    for record in json_data['records']:
                        if record['trackedDownloadStatus'] != "Ok":
                            known_reason = False
                            unknown_reason = False
                            for statusMessage in record["statusMessages"]:
                                for message in statusMessage["messages"]:
                                    if message.startswith("Worst track match: ") or message.startswith("Album match is not close enough: ") or message == "Has fewer tracks than existing release" or message == "Has missing tracks":
                                        known_reason = True
                                        if record['id'] not in record_ids_to_delete:
                                            record_ids_to_delete.append(record['id'])
                                        continue
                                    unknown_reason = True
                                    print("%s: %s" % (statusMessage["title"], message))
                            if unknown_reason or not known_reason:
                                unknown_warning = True
                else:
                    print("ERROR: did not page through all items")
                    sys.exit(1)

                for record_id in record_ids_to_delete:
                    print("Deleting %s" % str(record_id))
                    url = "http://lidarr.lidarr.svc.cluster.local/api/v1/queue"
                    r = requests.delete(url+"/"+str(record_id)+"?blacklist=true", headers={"X-Api-Key": os.environ['X_API_KEY']})
                    r.raise_for_status()

                if unknown_warning:
                    print("ERROR: there are unknown warnings")
                    sys.exit(1)

                print("Queue Ok - Nothing to do")
                EOF
                python queue-checker.py
  