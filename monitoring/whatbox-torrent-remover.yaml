apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: whatbox-torrent-remover
  namespace: monitoring
spec:
  schedule: "*/1 * * * *"
  successfulJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        spec:
          restartPolicy: Never
          containers:
          - name: whatbox-torrent-remover
            image: dippynark/python
            env:
            - name: WHATBOX_USERNAME
              valueFrom:
                secretKeyRef:
                  name: whatbox
                  key: username
            - name: WHATBOX_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: whatbox
                  key: password
            - name: WHATBOX_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: whatbox
                  key: hostname
            - name: SONARR_API_KEY
              valueFrom:
                secretKeyRef:
                  name: pvr
                  key: sonarr-api-key
            - name: RADARR_API_KEY
              valueFrom:
                secretKeyRef:
                  name: pvr
                  key: radarr-api-key
            - name: LIDARR_API_KEY
              valueFrom:
                secretKeyRef:
                  name: pvr
                  key: lidarr-api-key
            args:
            - bash
            - -c
            - |
              set -euo pipefail

              cat > whatbox-torrent-orphan-remover.py <<EOF
              import os
              import sys
              import xmlrpc.client
              from shutil import rmtree

              base_directory = "/mnt/whatbox/luke"

              # setup connection
              server_url = "https://%s:%s@%s/xmlrpc" % (os.environ['WHATBOX_USERNAME'], os.environ['WHATBOX_PASSWORD'], os.environ['WHATBOX_HOSTNAME']);
              server = xmlrpc.client.Server(server_url);

              # retrieve existing directories
              media_types = os.listdir(base_directory)
              existing_directories = []
              for media_type in media_types:
                  directories = os.listdir(os.path.join(base_directory, media_type))
                  directories = list(map(lambda x: os.path.join(os.path.join(base_directory, media_type), x), directories))
                  existing_directories = existing_directories + directories

              # retrieve torrent directories
              torrents = server.d.multicall.filtered("",
                  "main",
                  "or=\"equal=d.custom1=,cat=LukeBooks\",\"equal=d.custom1=,cat=LukeFilms\",\"equal=d.custom1=,cat=LukeMusic\",\"equal=d.custom1=,cat=LukeTVShows\",\"equal=d.custom1=,cat=LukeApplications\",\"equal=d.custom1=,cat=LukeGames\"",
                  "d.name=",
                  "d.get_directory=")
              torrent_directories = []
              for torrent in torrents:
                  torrent_name = torrent[0]
                  torrent_directory = torrent[1]
                  torrent_directory = os.path.join(torrent_directory.replace("/home/%s/files" % os.environ['WHATBOX_USERNAME'], "/mnt/whatbox").replace(torrent_name, ""), torrent_name)
                  torrent_directories.append(torrent_directory)
              for directory in existing_directories:
                  if directory not in torrent_directories:
                      print("Removing: %s" % directory)
                      if os.path.isfile(directory):
                          os.remove(directory)
                          continue
                      if os.path.isdir(directory):
                          rmtree(directory)
                          continue
                      print("ERROR: path is neither a file nor a directory: %s" % directory)
                      sys.exit(1)
              EOF
              python whatbox-torrent-orphan-remover.py

              cat > whatbox-torrent-eraser.py <<'EOF'
              import os
              import sys
              import requests
              import traceback
              import json
              import xmlrpc.client
              from datetime import datetime

              three_days_seconds = 60*60*72
              tv_show_seeding_requirement_seconds = 60*60*120 + three_days_seconds
              film_seeding_requirement_seconds = 60*60*48 + three_days_seconds
              music_seeding_requirement_seconds = 60*60*72 + three_days_seconds

              # check disk usage
              s = requests.Session()
              r = s.post("https://%s/login" % os.environ['WHATBOX_HOSTNAME'], data={'username': os.environ['WHATBOX_USERNAME'], 'password': os.environ['WHATBOX_PASSWORD']})
              r = s.get("https://%s/api/disk_usage" % os.environ['WHATBOX_HOSTNAME'])

              json_response = json.loads(r.text)
              disk_space_allotted = json_response['disk_space_allotted']
              disk_space_used = json_response['disk_space_used']

              # setup connection
              server_url = "https://%s:%s@%s/xmlrpc" % (os.environ['WHATBOX_USERNAME'], os.environ['WHATBOX_PASSWORD'], os.environ['WHATBOX_HOSTNAME']);
              server = xmlrpc.client.Server(server_url);

              # create torrent list
              torrents = server.d.multicall.filtered("",
                  "main",
                  "or=\"equal=d.custom1=,cat=LukeTVShows\",\"equal=d.custom1=,cat=LukeFilms\",\"equal=d.custom1=,cat=LukeMusic\"",
                  "d.name=",
                  "d.hash=",
                  "d.custom1=",
                  "d.timestamp.finished=",
                  "d.ratio=",
                  "d.size_bytes=")
              now = datetime.now()

              # get total size of selected torrents
              total_size = 0
              for torrent in torrents:
                  total_size += torrent[5]

              # filter H&Rs
              torrents = [torrent for torrent in torrents if torrent[3] != 0]
              torrents = [torrent for torrent in torrents if torrent[2] != "LukeTVShows" or (now - datetime.fromtimestamp(torrent[3])).total_seconds() > tv_show_seeding_requirement_seconds]
              torrents = [torrent for torrent in torrents if torrent[2] != "LukeFilms" or (now - datetime.fromtimestamp(torrent[3])).total_seconds() > film_seeding_requirement_seconds]
              torrents = [torrent for torrent in torrents if torrent[2] != "LukeMusic" or (now - datetime.fromtimestamp(torrent[3])).total_seconds() > music_seeding_requirement_seconds]
              # replace ratio with ratio rate
              torrents = list(map(lambda x: [x[0], x[1], x[2], x[3], x[4] / ((now - datetime.fromtimestamp(x[3])).total_seconds() / 1000), x[5]], torrents))
              # sort list by ratio rate with tv shows and films first
              sorter = lambda x: (x[2] != "LukeTVShows", x[2] != "LukeFilms", x[4])
              torrents = sorted(torrents, key=sorter)

              # get total size of removable torrents
              total_removable_size = 0
              for torrent in torrents:
                  total_removable_size += torrent[5]

              # create list of torrents to erase
              # also determine whether the ratio of removable torrents to the total will be less
              # than a given ratio so can prevent further downloads
              minimum_ratio = 0.4
              ratio = total_removable_size / total_size
              ratio_will_be_below_minimum = ratio < minimum_ratio
              torrents_to_erase = []
              total_size_to_erase = 0
              for torrent in torrents:
                  ratio_will_be_below_minimum = ratio < minimum_ratio
                  if disk_space_used - total_size_to_erase > 0.95 * disk_space_allotted:
                      name = torrent[0]
                      hash = torrent[1]
                      size = torrent[5]
                      total_size_to_erase += size
                      torrents_to_erase.append([name, hash])
                      ratio = (total_removable_size - total_size_to_erase)/(total_size - total_size_to_erase)
                      continue
                  break

              # erase torrents
              if len(torrents_to_erase) > 0:
                  for torrent in torrents_to_erase:
                      print("Erasing: %s" % torrent[0])
                      server.d.erase(torrent[1])
              else:
                  print("Disk space usage less than 95% - nothing to remove")

              if not ratio_will_be_below_minimum and disk_space_used/disk_space_allotted <= 0.95:
                  # start all incomplete torrents
                  r = server.d.multicall.filtered("",
                    "main",
                    "and=\"d.incomplete=,cat=1\",\"or=\\\"equal=d.custom1=,cat=LukeBooks\\\",\\\"equal=d.custom1=,cat=LukeFilms\\\",\\\"equal=d.custom1=,cat=LukeMusic\\\",\\\"equal=d.custom1=,cat=LukeTVShows\\\",\\\"equal=d.custom1=,cat=LukeApplications\\\",\\\"equal=d.custom1=,cat=LukeGames\\\"\"",
                    "d.start=")

              stopping_torrents_failed = False
              if ratio_will_be_below_minimum:
                  try:
                      # stop all incomplete torrents
                      server.d.multicall.filtered("",
                        "main",
                        "and=\"d.incomplete=,cat=1\",\"or=\\\"equal=d.custom1=,cat=LukeBooks\\\",\\\"equal=d.custom1=,cat=LukeFilms\\\",\\\"equal=d.custom1=,cat=LukeMusic\\\",\\\"equal=d.custom1=,cat=LukeTVShows\\\",\\\"equal=d.custom1=,cat=LukeApplications\\\",\\\"equal=d.custom1=,cat=LukeGames\\\"\"",
                        "d.stop=")
                  except Exception:
                      stopping_torrents_failed = True
                      traceback.print_exc()

              # enable/disable torrent clients
              download_client_update_failed = False
              try:
                  sonarr_url = "http://sonarr.sonarr.svc.cluster.local/api/v3/downloadclient"
                  r = requests.get(sonarr_url, headers={"X-Api-Key": os.environ['SONARR_API_KEY']})
                  r.raise_for_status()
                  sonarr_clients = json.loads(r.text)

                  if ratio_will_be_below_minimum:
                      for client in sonarr_clients:
                          add_stopped_setting_found = False
                          for field in client["fields"]:
                              if field["name"] == "addStopped":
                                  add_stopped_setting_found = True
                                  if field["value"] == False:
                                      field["value"] = True
                                      r = requests.put(sonarr_url, headers={"X-Api-Key": os.environ['SONARR_API_KEY']}, data=json.dumps(client))
                                      r.raise_for_status()
                                      break
                          if not add_stopped_setting_found:
                              download_client_update_failed = True
                              print("addStopped setting not found for Sonarr client %s" % client["name"])
                  else:
                      for client in sonarr_clients:
                          add_stopped_setting_found = False
                          for field in client["fields"]:
                              if field["name"] == "addStopped":
                                  add_stopped_setting_found = True
                                  if field["value"] == True:
                                      field["value"] = False
                                      r = requests.put(sonarr_url, headers={"X-Api-Key": os.environ['SONARR_API_KEY']}, data=json.dumps(client))
                                      r.raise_for_status()
                                      break
                          if not add_stopped_setting_found:
                              download_client_update_failed = True
                              print("addStopped setting not found for Sonarr client %s" % client["name"])
              except Exception:
                  download_client_update_failed = True
                  traceback.print_exc()

              try:
                  radarr_url = "http://radarr.radarr.svc.cluster.local/api/downloadclient"
                  r = requests.get(radarr_url, headers={"X-Api-Key": os.environ['RADARR_API_KEY']})
                  r.raise_for_status()
                  radarr_clients = json.loads(r.text)

                  if ratio_will_be_below_minimum:
                      for client in radarr_clients:
                          add_stopped_setting_found = False
                          for field in client["fields"]:
                              if field["name"] == "DontStartAutomatically":
                                  add_stopped_setting_found = True
                                  if field["value"] == False:
                                      field["value"] = True
                                      r = requests.put(radarr_url, headers={"X-Api-Key": os.environ['RADARR_API_KEY']}, data=json.dumps(client))
                                      r.raise_for_status()
                                      break
                          if not add_stopped_setting_found:
                              download_client_update_failed = True
                              print("DontStartAutomatically setting not found for Radarr client %s" % client["name"])
                  else:
                      for client in radarr_clients:
                          add_stopped_setting_found = False
                          for field in client["fields"]:
                              if field["name"] == "DontStartAutomatically":
                                  add_stopped_setting_found = True
                                  if field["value"] == True:
                                      field["value"] = False
                                      r = requests.put(radarr_url, headers={"X-Api-Key": os.environ['RADARR_API_KEY']}, data=json.dumps(client))
                                      r.raise_for_status()
                                      break
                          if not add_stopped_setting_found:
                              download_client_update_failed = True
                              print("DontStartAutomatically setting not found for Radarr client %s" % client["name"])
              except Exception:
                  download_client_update_failed = True
                  traceback.print_exc()

              try:
                  lidarr_url = "http://lidarr.lidarr.svc.cluster.local/api/v1/downloadclient"
                  r = requests.get(lidarr_url, headers={"X-Api-Key": os.environ['LIDARR_API_KEY']})
                  r.raise_for_status()
                  lidarr_clients = json.loads(r.text)

                  if ratio_will_be_below_minimum:
                      for client in lidarr_clients:
                          add_stopped_setting_found = False
                          for field in client["fields"]:
                              if field["name"] == "addStopped":
                                  add_stopped_setting_found = True
                                  if field["value"] == False:
                                      field["value"] = True
                                      r = requests.put(lidarr_url, headers={"X-Api-Key": os.environ['LIDARR_API_KEY']}, data=json.dumps(client))
                                      r.raise_for_status()
                                      break
                          if not add_stopped_setting_found:
                              download_client_update_failed = True
                              print("addStopped setting not found for Lidarr client %s" % client["name"])
                  else:
                      for client in lidarr_clients:
                          add_stopped_setting_found = False
                          for field in client["fields"]:
                              if field["name"] == "addStopped":
                                  add_stopped_setting_found = True
                                  if field["value"] == True:
                                      field["value"] = False
                                      r = requests.put(lidarr_url, headers={"X-Api-Key": os.environ['LIDARR_API_KEY']}, data=json.dumps(client))
                                      r.raise_for_status()
                                      break
                          if not add_stopped_setting_found:
                              download_client_update_failed = True
                              print("addStopped setting not found for Lidarr client %s" % client["name"])
              except Exception:
                  download_client_update_failed = True
                  traceback.print_exc()

              if ratio_will_be_below_minimum:
                  # we cannot delete any more torrents but we need more space
                  print("Less than {:.0%} ({:.1%}) of torrent data is removable - disabling enabled torrent clients".format(minimum_ratio, ratio))

                  if stopping_torrents_failed:
                      print("ERROR: stopping torrents failed")
                      sys.exit(1)
                  if download_client_update_failed:
                      print("ERROR: disabling download clients failed")
                      sys.exit(1)
              else:
                  print("More than {:.0%} ({:.1%}) of torrent data is removable - enabling disabled torrent clients".format(minimum_ratio, ratio))
                  if download_client_update_failed:
                      print("ERROR: enabling download clients failed")
                      sys.exit(1)
              EOF
              python whatbox-torrent-eraser.py
            volumeMounts:
            - name: whatbox-luke
              mountPath: /mnt/whatbox/luke
          volumes:
          - name: whatbox-luke
            persistentVolumeClaim:
              claimName: whatbox-luke
