---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: plex-updater
  namespace: plex
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: patch-plex-deployment
  namespace: plex
rules:
- apiGroups: ["apps", "extensions"]
  resources: ["deployments"]
  resourceNames: ["plex"]
  verbs: ["get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: plex-updater:patch-plex-deployment
  namespace: plex
subjects:
- kind: ServiceAccount
  name: plex-updater
  namespace: plex
roleRef:
  kind: Role
  name: patch-plex-deployment
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: plex-updater
  namespace: plex
spec:
  schedule: "*/10 * * * *"
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        spec:
          serviceAccount: plex-updater
          restartPolicy: Never
          containers:
          - name: updater
            image: k8s.gcr.io/hyperkube:v1.15.1
            env:
            - name: PLEX_LOGIN
              valueFrom:
                secretKeyRef:
                  name: plex
                  key: PLEX_LOGIN
            - name: PLEX_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: plex
                  key: PLEX_PASSWORD
            args:
            - /bin/sh
            - -c
            - |
              PLEX_HOSTNAME="plex.lukeaddison.co.uk"
              PLEX_PORT=443

              apt-get update && apt-get install wget

              echo 'Retrieving a X-Plex-Token using Plex login/password...'

              wget -qO /tmp/plex_sign_in --http-user="$PLEX_LOGIN" --http-password="$PLEX_PASSWORD" 'https://plex.tv/users/sign_in.xml' \
                  --post-data='' \
                  --header='X-Plex-Client-Identifier: PlexMediaServerUpdater'
              X_PLEX_TOKEN=$(sed -n 's/.*<authentication-token>\(.*\)<\/authentication-token>.*/\1/p' /tmp/plex_sign_in)
              if [ -z "$X_PLEX_TOKEN" ]; then
                  cat /tmp/plex_sign_in
                  rm -f /tmp/plex_sign_in
                  echo 'Failed to retrieve the X-Plex-Token.'
                  exit 1
              fi
              rm -f /tmp/plex_sign_in

              DATA="$(wget -q -O - https://$PLEX_HOSTNAME:$PLEX_PORT/status/sessions?X-Plex-Token=$X_PLEX_TOKEN)"
              RET=$?
              DATA+="$(wget -q -O - https://$PLEX_HOSTNAME:$PLEX_PORT/livetv/sessions?X-Plex-Token=$X_PLEX_TOKEN)"

              if [ $RET -eq 0 ]; then
                  # Get a total count of active media (MediaContainer size), then deduct one for every paused stream.
                  # If all streams are paused, we consider the server to not be active.
                  mediacount="$(awk -F'"' '/<MediaContainer size="[0-9]+">/ {count+=$2}; /<Player[^>]* state="paused"/ {count--}; END {print count}' <<< "${DATA}")"
                  printf '%s\nActivity check reports a count of %i based on the data above\n\n' "$DATA" "$mediacount" >&2
                  [ $mediacount -gt 0 ] && exit 0
              else
                  echo "Failed to retrieve Plex sessions"
                  exit 1
              fi

              # if we don't know for sure that Plex is busy, assume that it's not so the update can proceed
              DATA="$(wget -q -O - https://hub.docker.com/v2/repositories/plexinc/pms-docker/tags/latest)"
              RET=$?

              if [ $RET -eq 0 ]; then
                  LATEST_SHA=$(echo $DATA | jq -r '[.images[] | select(.os == "linux" and .architecture == "amd64")][0].digest')
                  kubectl set image deployment/plex -n plex plex="plexinc/pms-docker@$LATEST_SHA"
                  RET=$?
                  if [ $RET -ne 0 ]; then
                      echo "Failed to set Plex image"
                      exit 1
                  fi
              else
                  echo "Failed to retrieve latest tag"
                  exit 1
              fi

              echo 'Plex image set'

              exit 0
