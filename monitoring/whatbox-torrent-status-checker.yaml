apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: whatbox-torrent-status-checker
  namespace: monitoring
spec:
  schedule: "*/10 * * * *"
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        spec:
          restartPolicy: Never
          containers:
          - name: whatbox-torrent-status-checker
            image: dippynark/python
            env:
            - name: WHATBOX_USERNAME
              valueFrom:
                secretKeyRef:
                  name: whatbox
                  key: username
            - name: WHATBOX_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: whatbox
                  key: password
            - name: WHATBOX_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: whatbox
                  key: hostname
            - name: TRACKER_BOOK_EMAIL
              valueFrom:
                secretKeyRef:
                  name: tracker
                  key: book-email
            - name: TRACKER_BOOK_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tracker
                  key: book-password
            - name: TRACKER_BOOK_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: tracker
                  key: book-hostname
            - name: TRACKER_BOOK_USER_ID
              valueFrom:
                secretKeyRef:
                  name: tracker
                  key: book-user-id
            - name: TRACKER_FILM_API_USER
              valueFrom:
                secretKeyRef:
                  name: tracker
                  key: film-api-user
            - name: TRACKER_FILM_API_KEY
              valueFrom:
                secretKeyRef:
                  name: tracker
                  key: film-api-key
            - name: TRACKER_FILM_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: tracker
                  key: film-hostname
            args:
            - bash
            - -c
            - |
              set -euo pipefail

              cat > whatbox-torrent-status-checker.py <<EOF
              import datetime
              import os
              import sys
              import xmlrpc.client
              import mechanicalsoup
              import json
              import requests
              import urllib.parse as urlparse
              from urllib.parse import parse_qs

              server_url = "https://%s:%s@%s/xmlrpc" % (os.environ['WHATBOX_USERNAME'], os.environ['WHATBOX_PASSWORD'], os.environ['WHATBOX_HOSTNAME']);
              server = xmlrpc.client.Server(server_url);

              torrents = server.d.multicall.filtered("",
                  "main",
                  "or=\"equal=d.custom1=,cat=LukeBooks\",\"equal=d.custom1=,cat=LukeFilms\",\"equal=d.custom1=,cat=LukeMusic\",\"equal=d.custom1=,cat=LukeTVShows\",\"equal=d.custom1=,cat=LukeApplications\",\"equal=d.custom1=,cat=LukeGames\"",
                  "d.name=",
                  "d.hash=",
                  "d.state=",
                  "d.is_open=",
                  "d.is_active=",
                  "d.message=",
                  "d.custom1=",
                  "d.timestamp.finished=")

              irrecoverable_errors = False
              for torrent in torrents:
                  name = torrent[0]
                  hash = torrent[1]
                  state = torrent[2]
                  is_open = torrent[3]
                  is_active = torrent[4]
                  message = torrent[5]
                  label = torrent[6]
                  finished = torrent[7]

                  if state != 1 or is_open != 1 or is_active != 1 or message != "":

                      # give failing torrents at least a day to be downloaded if finished
                      now = datetime.datetime.now()
                      if finished != 0 and (now - datetime.datetime.fromtimestamp(finished)).total_seconds() <= 60*60*24:
                          continue

                      if message.startswith('Tracker: [') and message.endswith(']'):
                          tracker_message = message[len('Tracker: ['):len(message) - len(']')]

                          if tracker_message == 'Timed out':
                              continue
                          if tracker_message == "Couldn't connect to server":
                              continue
                          if tracker_message == "Timeout was reached":
                              continue
                          if tracker_message == "Could not parse bencoded data: 504 Gateway Time-out    504 Gateway Time-out  nginx":
                              continue
                          if tracker_message == "Could not parse bencoded data: 502 Bad Gateway    502 Bad Gateway  nginx":
                              continue
                          if tracker_message == "Could not parse bencoded data: landof.tv | 502: Bad gateway        body{margin:0;padding:0}                                       ":
                              continue
                          if tracker_message == "Could not parse bencoded data: bibliotik.me | 502: Bad gateway body{margin:0;padding:0} ":
                              continue
                          if tracker_message == "Could not parse bencoded data: bibliotik.me | 502: Bad gateway        body{margin:0;padding:0}                                    ":
                              continue
                          if tracker_message == "SSL connect error":
                              continue
                          if tracker_message == "Server returned nothing (no headers, no data)":
                              continue

                          if tracker_message.startswith('Failure reason "') and tracker_message.endswith('"'):
                              tracker_failure_reason = tracker_message[len('Failure reason "'):len(tracker_message) - len('"')]

                              if tracker_failure_reason == "System Overload":
                                  continue

                              if tracker_failure_reason == "The tracker is down. We\'re working on fixing the problem":
                                  continue

                              if tracker_failure_reason == "Tracker load too high: try again in a few minutes.":
                                  continue

                              if tracker_failure_reason == 'Unregistered torrent':
                                  print("Erasing %s: %s" % (name, tracker_failure_reason))
                                  server.d.erase(hash)
                                  continue

                              if tracker_failure_reason == 'Unregistered torrent: Specifically Banned: pre-retail':
                                  print("Erasing %s: %s" % (name, tracker_failure_reason))
                                  server.d.erase(hash)
                                  continue

                              if tracker_failure_reason == 'Unregistered torrent: Specifically Banned: pre retail':
                                  print("Erasing %s: %s" % (name, tracker_failure_reason))
                                  server.d.erase(hash)
                                  continue

                              if tracker_failure_reason == 'Unregistered torrent: Specifically Banned: pre-retail, HDRIP':
                                  print("Erasing %s: %s" % (name, tracker_failure_reason))
                                  server.d.erase(hash)
                                  continue

                              if tracker_failure_reason.startswith('Unregistered torrent: Trump: ') or tracker_failure_reason.startswith('Unregistered torrent: Dupe: '):
                                  trump = tracker_failure_reason[len('Unregistered torrent: Trump: '):]
                                  if tracker_failure_reason.startswith('Unregistered torrent: Dupe: '):
                                      trump = tracker_failure_reason[len('Unregistered torrent: Dupe: '):]

                                  trump_url_index = trump.index("https://")
                                  trump_url = trump[trump_url_index:]

                                  if trump_url.startswith("https://%s" % os.environ['TRACKER_FILM_HOSTNAME']):
                                      parsed = urlparse.urlparse(trump_url)
                                      torrent_id = parse_qs(parsed.query)['torrentid'][0]

                                      headers = {
                                          'ApiUser': os.environ['TRACKER_FILM_API_USER'],
                                          'ApiKey': os.environ['TRACKER_FILM_API_KEY']
                                      }

                                      r = requests.get(trump_url, headers=headers)
                                      r.raise_for_status()
                                      json_data = json.loads(r.text)

                                      auth_key = json_data["AuthKey"]
                                      torrent_pass = json_data["PassKey"]

                                      download_url = "https://%s/torrents.php?action=download&id=%s&authkey=%s&torrent_pass=%s" % (os.environ['TRACKER_FILM_HOSTNAME'], torrent_id, auth_key, torrent_pass)

                                      r = requests.get(download_url, headers=headers)
                                      r.raise_for_status()
                                      if r.content == b'Your popcorn quota has been reached, come back later!\n':
                                          print("ERROR: popcorn quota reached")
                                      else:
                                          r = server.load.raw_start_verbose("", xmlrpc.client.Binary(r.content), "d.delete_tied=", "d.custom1.set=LukeFilms", "d.directory.set=~/files/luke/films/")
                                          if r == 0:
                                              print("Erasing %s: %s" % (name, tracker_failure_reason))
                                              server.d.erase(hash)
                                              continue
                                          print("ERROR: failed to load torrent %s: %s" % (trump_url, str(r)))

                              if tracker_failure_reason == "Not VIP":
                                  login_url = "https:/%s/login.php" % os.environ['TRACKER_BOOK_HOSTNAME']
                                  user_url = "https://%s/u/%s" % (os.environ['TRACKER_BOOK_HOSTNAME'], os.environ['TRACKER_BOOK_USER_ID'])
                                  vip_buy_url = "https://%s/json/bonusBuy.php?spendtype=VIP&duration=4" % os.environ['TRACKER_BOOK_HOSTNAME']

                                  browser = mechanicalsoup.StatefulBrowser()
                                  browser.open(login_url)

                                  browser.select_form('form[action="/takelogin.php"]')
                                  browser["email"] = os.environ['TRACKER_BOOK_EMAIL']
                                  browser["password"] = os.environ['TRACKER_BOOK_PASSWORD']
                                  r = browser.submit_selected()
                                  r.raise_for_status()

                                  r = browser.get(user_url)
                                  r.raise_for_status()

                                  rows = list(browser.get_current_page().find_all('tr'))
                                  vip_enabled = False
                                  for row in rows:
                                      row_title = row.find('td', class_='rowhead').text
                                      if row_title == 'Class':
                                          class_name = row.find('td', class_='row1').text
                                          if class_name != "VIP":
                                              if class_name == "Power User":
                                                  r = browser.get(vip_buy_url)
                                                  r.raise_for_status()
                                                  vip_enabled = True
                                              else:
                                                  print("ERROR: unexpected class: %s" % class_name)
                                          else:
                                              vip_enabled = True
                                          break
                                  if vip_enabled:
                                      continue

                      irrecoverable_errors = True
                      print("Name: %s, Message: %s" % (name, message))

              if irrecoverable_errors:
                  sys.exit(1)
              EOF
              python whatbox-torrent-status-checker.py
