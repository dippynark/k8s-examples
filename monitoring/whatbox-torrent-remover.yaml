apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: whatbox-torrent-remover
  namespace: monitoring
spec:
  schedule: "*/2 * * * *"
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        spec:
          restartPolicy: Never
          containers:
          - name: whatbox-torrent-remover
            image: python:3
            env:
            - name: WHATBOX_USERNAME
              valueFrom:
                secretKeyRef:
                  name: whatbox
                  key: username
            - name: WHATBOX_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: whatbox
                  key: password
            - name: WHATBOX_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: whatbox
                  key: hostname
            args:
            - bash
            - -c
            - |
              set -euo pipefail

              pip install requests

              cat > whatbox-torrent-orphan-remover.py <<EOF
              import os
              import sys
              import xmlrpc.client
              from shutil import rmtree

              base_directory = "/mnt/whatbox/luke"

              # setup connection
              server_url = "https://%s:%s@%s/xmlrpc" % (os.environ['WHATBOX_USERNAME'], os.environ['WHATBOX_PASSWORD'], os.environ['WHATBOX_HOSTNAME']);
              server = xmlrpc.client.Server(server_url);

              # retrieve existing directories
              media_types = os.listdir(base_directory)
              existing_directories = []
              for media_type in media_types:
                  directories = os.listdir(os.path.join(base_directory, media_type))
                  directories = list(map(lambda x: os.path.join(os.path.join(base_directory, media_type), x), directories))
                  existing_directories = existing_directories + directories

              # retrieve torrent directories
              torrents = server.d.multicall.filtered("",
                  "main",
                  "or=\"equal=d.custom1=,cat=LukeBooks\",\"equal=d.custom1=,cat=LukeFilms\",\"equal=d.custom1=,cat=LukeMusic\",\"equal=d.custom1=,cat=LukeTVShows\",\"equal=d.custom1=,cat=LukeApplications\",\"equal=d.custom1=,cat=LukeGames\"",
                  "d.name=",
                  "d.get_directory=")
              torrent_directories = []
              for torrent in torrents:
                  torrent_name = torrent[0]
                  torrent_directory = torrent[1]
                  torrent_directory = os.path.join(torrent_directory.replace("/home/%s/files" % os.environ['WHATBOX_USERNAME'], "/mnt/whatbox").replace(torrent_name, ""), torrent_name)
                  torrent_directories.append(torrent_directory)
              for directory in existing_directories:
                  if directory not in torrent_directories:
                      print("Removing: %s" % directory)
                      if os.path.isfile(directory):
                        os.remove(directory)
                        continue
                      if os.path.isdir(directory):
                        rmtree(directory)
                        continue
                      print("ERROR: path is neither a file nor a directory: %s" % directory)
                      sys.exit(1)
              EOF
              python whatbox-torrent-orphan-remover.py

              cat > whatbox-torrent-eraser.py <<EOF
              import os
              import sys
              import requests
              import json
              import xmlrpc.client
              from datetime import datetime

              expected_allotted_disk_space = 2968681394995

              tv_show_seeding_requirement_seconds = 60*60*120
              film_seeding_requirement_seconds = 60*60*48
              music_seeding_requirement_seconds = 60*60*72
              seeding_requirement_multiplier = 2

              # check disk usage
              s = requests.Session() 
              r = s.post("https://%s/login" % os.environ['WHATBOX_HOSTNAME'], data={'username': os.environ['WHATBOX_USERNAME'], 'password': os.environ['WHATBOX_PASSWORD']})
              r = s.get("https://%s/api/disk_usage" % os.environ['WHATBOX_HOSTNAME'])

              json_response = json.loads(r.text)
              disk_space_allotted = json_response['disk_space_allotted']
              disk_space_used = json_response['disk_space_used']
              # sanity check allotted disk space
              if disk_space_allotted != expected_allotted_disk_space:
                  print("Allotted disk space has changed: %d to %d" % (expected_allotted_disk_space, disk_space_allotted))
                  sys.exit(1)
              if disk_space_used/disk_space_allotted <= 0.95:
                  print("Disk space usage less than 95% - nothing to do")
                  sys.exit(0)

              # setup connection
              server_url = "https://%s:%s@%s/xmlrpc" % (os.environ['WHATBOX_USERNAME'], os.environ['WHATBOX_PASSWORD'], os.environ['WHATBOX_HOSTNAME']);
              server = xmlrpc.client.Server(server_url);

              # create torrent list
              torrents = server.d.multicall.filtered("",
                  "main",
                  "or=\"equal=d.custom1=,cat=LukeTVShows\",\"equal=d.custom1=,cat=LukeFilms\",\"equal=d.custom1=,cat=LukeMusic\"",
                  "d.name=",
                  "d.hash=",
                  "d.custom1=",
                  "d.timestamp.finished=",
                  "d.ratio=",
                  "d.size_bytes=")
              now = datetime.now()
              # filter H&Rs
              torrents = [torrent for torrent in torrents if torrent[3] != 0]
              torrents = [torrent for torrent in torrents if torrent[2] != "LukeTVShows" or (now - datetime.fromtimestamp(torrent[3])).total_seconds() > tv_show_seeding_requirement_seconds*seeding_requirement_multiplier]
              torrents = [torrent for torrent in torrents if torrent[2] != "LukeFilms" or (now - datetime.fromtimestamp(torrent[3])).total_seconds() > film_seeding_requirement_seconds*seeding_requirement_multiplier]
              torrents = [torrent for torrent in torrents if torrent[2] != "LukeMusic" or (now - datetime.fromtimestamp(torrent[3])).total_seconds() > music_seeding_requirement_seconds*seeding_requirement_multiplier]
              # replace ratio with ratio rate
              torrents = list(map(lambda x: [x[0], x[1], x[2], x[3], x[4] / ((now - datetime.fromtimestamp(x[3])).total_seconds() / 1000), x[5]], torrents))
              # sort list by ratio rate with tv shows and films first
              sorter = lambda x: (x[2] != "LukeTVShows", x[2] != "LukeFilms", x[4])
              torrents = sorted(torrents, key=sorter)

              # create list of torrents to erase
              torrents_to_erase = []
              total_size_to_erase = 0
              for torrent in torrents:
                  if disk_space_used - total_size_to_erase > 0.95 * disk_space_allotted:
                      name = torrent[0]
                      hash = torrent[1]
                      size = torrent[5]
                      total_size_to_erase += size
                      torrents_to_erase.append([name, hash])
                      continue
                  break

              # erase torrents
              for torrent in torrents_to_erase:
                  print("Erasing: %s" % torrent[0])
                  server.d.erase(torrent[1])
              EOF
              python whatbox-torrent-eraser.py
            volumeMounts:
              - name: whatbox-luke
                mountPath: /mnt/whatbox/luke
          volumes:
            - name: whatbox-luke
              persistentVolumeClaim:
                claimName: whatbox-luke
