apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: history-checker
  namespace: radarr
spec:
  schedule: "*/10 * * * *"
  successfulJobsHistoryLimit: 1
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: "false"
        spec:
          restartPolicy: Never
          containers:
          - name: history-checker
            image: dippynark/python
            env:
            - name: RADARR_API_KEY
              valueFrom:
                secretKeyRef:
                  name: radarr
                  key: radarr_apikey
            args:
            - bash
            - -c
            - |
              set -euo pipefail

              cat > history-checker.py <<EOF
              import requests
              import json
              import os
              import sys

              page_size = 100
              url = "http://radarr.radarr.svc.cluster.local/api/history?page=1&pageSize=%d&sortKey=date&sortDir=desc" % page_size
              r = requests.get(url, headers={"X-Api-Key": os.environ['RADARR_API_KEY']})
              r.raise_for_status()
              json_data = json.loads(r.text)

              grabbed = {}
              imported = []
              for record in json_data['records']:
                if record['eventType'] == 'downloadFolderImported' and record['movieId'] not in imported:
                  imported.append(record['movieId'])
                if record['eventType'] == 'grabbed' and record['movieId'] not in imported:
                  if not grabbed.get(record['sourceTitle'], None):
                    grabbed[record['sourceTitle']] = []
                  grabbed[record['sourceTitle']].append(record)

              grabbed = {k: v for k, v in grabbed.items() if len(v) > 1}
              if len(grabbed) > 0:
                for k, v in grabbed.items():
                  print("%s %s %s %s" % (k, v[-1]["movie"]["title"], v[-1]["quality"]["quality"]["name"], ' '.join([customFormat["name"] for customFormat in v[-1]["quality"]["customFormats"]])))
                print("ERROR: Films are being grabbed repeatedly")
                sys.exit(1)
              EOF
              python history-checker.py
