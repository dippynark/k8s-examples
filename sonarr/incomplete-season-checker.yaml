apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: incomplete-season-checker
  namespace: sonarr
spec:
  schedule: "*/10 * * * *"
  successfulJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        spec:
          restartPolicy: Never
          containers:
          - name: incomplete-season-checker
            image: dippynark/python
            env:
            - name: REDIS_PASS
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: REDIS_PASS
            - name: SONARR_API_KEY
              valueFrom:
                secretKeyRef:
                  name: sonarr
                  key: sonarr_apikey
            args:
            - bash
            - -c
            - |
              set -euo pipefail

              cat > incomplete-season-checker.py <<EOF
              import requests
              import json
              import sys
              import redis
              import os
              from datetime import datetime, timedelta

              url = "http://sonarr.sonarr.svc.cluster.local/api/v3/series"
              r = requests.get(url, headers={"X-Api-Key": os.environ['SONARR_API_KEY']})
              r.raise_for_status()
              json_data = json.loads(r.text)

              missing_episodes_title_seasons = []
              for series in json_data:
                  for season in series["seasons"]:
                      # ignore unmonitored and specials
                      if season["monitored"] == False or season["seasonNumber"] == 0:
                          continue
                      statistics = season["statistics"]
                      if "percentOfEpisodes" in statistics and statistics["percentOfEpisodes"] != 0 and statistics["percentOfEpisodes"] != 100:
                          missing_episodes_title_seasons.append("%s: Season %s (%s%%)" % (series["title"], str(season["seasonNumber"]), int(statistics["percentOfEpisodes"])))
                          break

              r = redis.Redis(host='redis.monitoring.svc.cluster.local', port=6379, db=0, password=os.environ['REDIS_PASS'])
              timestamp = r.get('sonarr:last.successful.incomplete.season.check.timestamp')

              # reset timer if there is not existing timestamp or there are no missing episodes
              if timestamp == None or len(missing_episodes_title_seasons) == 0:
                  r.set('sonarr:last.successful.incomplete.season.check.timestamp', datetime.timestamp(datetime.now()))
                  sys.exit(0)

              # we have missing episodes and a timestamp of the last successful check
              print("Episodes are missing!")
              last = datetime.fromtimestamp(float(timestamp))

              # if the title has changed, reset timer
              current_title = r.get('sonarr:last.failed.incomplete.season.check.title').decode("utf-8")
              if current_title == None or current_title not in missing_episodes_title_seasons:
                  current_title = missing_episodes_title_seasons[0]
                  r.set('sonarr:last.failed.incomplete.season.check.title', missing_episodes_title_seasons[0])
                  last = datetime.now()
                  r.set('sonarr:last.successful.incomplete.season.check.timestamp', datetime.timestamp(last))

              print("%s missing since %s" % (current_title, last.strftime("%m/%d/%Y %H:%M:%S")))

              last = datetime.fromtimestamp(float(timestamp))
              delta = timedelta(days=5)
              if last < datetime.now() - delta:
                  print("ERROR: there have been missing episodes for 5 days")
                  sys.exit(1)
              EOF
              python incomplete-season-checker.py
